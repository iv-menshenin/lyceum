package sparseset

// ТРЕБУЕТСЯ: Написать реализацию структуры для хранения данных следуя указанному ниже контракту.

// Key будет использовано в качестве ключа. Допустимы только целочисленные значения.
type Key interface {
	int | int64 | uint64
}

// SparseSet — это структура данных, которая используется для эффективного хранения и управления множествами,
// особенно в контексте работы с большими наборами данных, где элементы могут быть разреженными
// (т.е. не все возможные значения присутствуют в множестве).
type SparseSet[K Key, T any] struct{}

// New создает новый объект SparseSet.
func New[K Key, T any]() *SparseSet[K, T] {
	// TODO
}

// Len возвращает актуальный размер хранилища. Значение равно количеству присутствующих данных.
func (s *SparseSet[K, T]) Len() int {
	// TODO
}

// Set сохраняет новое значение, связывая его с определенным ключом.
func (s *SparseSet[K, T]) Set(K, T) (ref *T) {
	// TODO
}

// Get позволяет получить ссылку на сохраненный объект.
func (s *SparseSet[K, T]) Get(K) *T {
	// TODO
}

// Delete удаляет существующий объект по его идентификатору.
func (s *SparseSet[K, T]) Delete(key K) {
	// TODO
}

// Each позволяет выполнить функцию для каждого значения, присутствующего в наборе.
func (s *SparseSet[K, T]) Each(func(K, *T) bool) {
	// TODO
}
