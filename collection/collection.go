package collection

// ТРЕБУЕТСЯ: Написать реализацию структуры для хранения данных следуя указанному ниже контракту.

type (
	// Collection должна быть обобщенной и уметь разного рода типы данных.
	Collection[T any] struct {
		// TODO
	}
)

// New конструктор, который будет вызываться в каждом тесте для инициализации объекта.
func New[T any]() *Collection[T] {
	// TODO
}

// Len всегда возвращает актуальное кол-во хранимых элементов.
func (c *Collection[T]) Len() int {
	// TODO
}

// Push сохраняет новый элемент в коллекции с индексом равным текущему Len. По сути это замена append стандартным слайсам.
func (c *Collection[T]) Push(T) *T {
	// TODO
}

// Get позволяет получить адрес элемента по его порядковому номеру.
func (c *Collection[T]) Get(int) *T {
	// TODO
}

// Delete удаляет элемент из коллекции. Если это не последний элемент, то его идентификатор занимается другим элементом.
// Важно, чтобы после выполнения этого метода идентификаторы элементов все еще были непрерывны.
func (c *Collection[T]) Delete(int) {
	// TODO
}

// Pop позволяет вернуть последний элемент с удалением его из хранилища.
func (c *Collection[T]) Pop() T {
	// TODO
}
